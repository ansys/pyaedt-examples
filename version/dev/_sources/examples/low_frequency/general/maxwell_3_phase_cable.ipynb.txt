{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "249311ed",
   "metadata": {},
   "source": [
    "# 3-Phase Cable with Neutral\n",
    "\n",
    "This example uses PyAEDT to create a 3-phase cable with neutral\n",
    "and solve it using Maxwell 2D AC Magnetic (Eddy Current) solver.\n",
    "\n",
    "Keywords: **Maxwell 2D**, **cable**, **3-phase**, **field calculator**, **field plot**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88a1aeab",
   "metadata": {},
   "source": [
    "## Prerequisites\n",
    "\n",
    "### Perform imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b9ae2c0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import tempfile\n",
    "import time\n",
    "\n",
    "import ansys.aedt.core  # Interface to Ansys Electronics Desktop\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "478806dc",
   "metadata": {},
   "source": [
    "### Define constants"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7de58577",
   "metadata": {},
   "outputs": [],
   "source": [
    "AEDT_VERSION = \"2025.2\"\n",
    "NUM_CORES = 4\n",
    "NG_MODE = False  # Open AEDT UI when it is launched."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d607145a",
   "metadata": {},
   "source": [
    "### Create temporary directory\n",
    "\n",
    "Create a temporary directory where downloaded data or\n",
    "dumped data can be stored.\n",
    "If you'd like to retrieve the project data for subsequent use,\n",
    "the temporary folder name is given by ``temp_folder.name``."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e834d3d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_folder = tempfile.TemporaryDirectory(suffix=\".ansys\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c0ca5b0",
   "metadata": {},
   "source": [
    "## Launch AEDT and Maxwell 2D\n",
    "\n",
    "Create an instance of the ``Maxwell2d`` class named ``m2d`` by providing\n",
    "the project and design names, the version, and the graphical mode."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "37b875c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "project_name = os.path.join(temp_folder.name, \"M2D_cable.aedt\")\n",
    "m2d = ansys.aedt.core.Maxwell2d(\n",
    "    project=project_name,\n",
    "    design=\"cable_maxwell_eddy\",\n",
    "    solution_type=\"AC MagneticXY\",\n",
    "    version=AEDT_VERSION,\n",
    "    non_graphical=NG_MODE,\n",
    "    new_desktop=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be3c1b48",
   "metadata": {},
   "source": [
    "## Define modeler units"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f5a1ae67",
   "metadata": {},
   "outputs": [],
   "source": [
    "m2d.modeler.model_units = \"mm\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3deb7463",
   "metadata": {},
   "source": [
    "## Add materials\n",
    "\n",
    "Add XLPE material for insulation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b0c7a84",
   "metadata": {},
   "outputs": [],
   "source": [
    "xlpe = m2d.materials.add_material(\"XLPE\")\n",
    "xlpe.update()\n",
    "xlpe.conductivity = \"0\"\n",
    "xlpe.permittivity = \"2.3\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b7f80de",
   "metadata": {},
   "source": [
    "## Create geometry of the cable and assign materials\n",
    "\n",
    "Create geometry of the 3-phase cable with neutral and assign materials."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d99011d1",
   "metadata": {},
   "source": [
    "### Create the cable shield"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e0af813",
   "metadata": {},
   "outputs": [],
   "source": [
    "shield = m2d.modeler.create_circle(origin=[0, 0, 0], radius=8, name=\"Shield\")\n",
    "filler = m2d.modeler.create_circle(origin=[0, 0, 0], radius=7.5, name=\"Filler\")\n",
    "m2d.modeler.subtract(blank_list=shield.name, tool_list=filler.name)\n",
    "shield.material_name = \"aluminum\"\n",
    "filler.material_name = \"polyethylene\"\n",
    "filler.color = [143, 175, 143]\n",
    "filler.transparency = 0"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ef64858",
   "metadata": {},
   "source": [
    "### Create the cable inner conductors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e01a75df",
   "metadata": {},
   "outputs": [],
   "source": [
    "phase_a = m2d.modeler.create_circle(origin=[5, 0, 0], radius=2.0575, material=\"copper\")\n",
    "cond = m2d.modeler.duplicate_around_axis(\n",
    "    assignment=phase_a.name, axis=\"Z\", angle=120, clones=3\n",
    ")\n",
    "phase_b = m2d.modeler[cond[1][0]]\n",
    "phase_c = m2d.modeler[cond[1][1]]\n",
    "phase_a.name = \"PhaseA\"\n",
    "phase_a.color = [255, 0, 0]\n",
    "phase_a.transparency = 0\n",
    "phase_b.name = \"PhaseB\"\n",
    "phase_b.color = [0, 0, 255]\n",
    "phase_b.transparency = 0\n",
    "phase_c.name = \"PhaseC\"\n",
    "phase_c.color = [0, 255, 0]\n",
    "phase_c.transparency = 0"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "284fe128",
   "metadata": {},
   "source": [
    "### Create the cable inner conductor insulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9211bfe3",
   "metadata": {},
   "outputs": [],
   "source": [
    "insul_a = m2d.modeler.create_circle(origin=[5, 0, 0], radius=2.25, material=\"XLPE\")\n",
    "insul_a.transparency = 0\n",
    "insul = m2d.modeler.duplicate_around_axis(\n",
    "    assignment=insul_a.name, axis=\"Z\", angle=120, clones=3\n",
    ")\n",
    "insul_b = m2d.modeler[insul[1][0]]\n",
    "insul_c = m2d.modeler[insul[1][1]]\n",
    "insul_a.name = \"InsulA\"\n",
    "insul_b.name = \"InsulB\"\n",
    "insul_c.name = \"InsulC\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f09dde6",
   "metadata": {},
   "source": [
    "### Create the cable neutral wire and its insulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "977190a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "neu_ins = m2d.modeler.duplicate_along_line(\n",
    "    assignment=[phase_a.name, insul_a.name], vector=[-5, 0, 0], clones=2\n",
    ")\n",
    "phase_n = m2d.modeler[neu_ins[1][0]]\n",
    "phase_n.name = \"PhaseN\"\n",
    "phase_n.color = [128, 64, 64]\n",
    "insul_n = m2d.modeler[neu_ins[1][1]]\n",
    "insul_n.name = \"InsulN\"\n",
    "\n",
    "m2d.modeler.subtract(blank_list=filler, tool_list=[insul_a, insul_b, insul_c, insul_n])\n",
    "m2d.modeler.subtract(blank_list=insul_a, tool_list=phase_a.name)\n",
    "m2d.modeler.subtract(blank_list=insul_b, tool_list=phase_b.name)\n",
    "m2d.modeler.subtract(blank_list=insul_c, tool_list=phase_c.name)\n",
    "m2d.modeler.subtract(blank_list=insul_n, tool_list=phase_n.name)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33eea3dc",
   "metadata": {},
   "source": [
    "## Create region\n",
    "\n",
    "Create the air region and assign boundary condition to it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "37fc2ee5",
   "metadata": {},
   "outputs": [],
   "source": [
    "region = m2d.modeler.create_region(pad_value=200)\n",
    "m2d.assign_balloon(assignment=region.edges)\n",
    "\n",
    "m2d.modeler.fit_all()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71fa067a",
   "metadata": {},
   "source": [
    "## Assign excitations\n",
    "\n",
    "Set electrical excitations for the conductive objects."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4b7289f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "winding_a = m2d.assign_winding(assignment=phase_a.name, current=200, name=\"PhaseA\")\n",
    "winding_b = m2d.assign_winding(\n",
    "    assignment=phase_b.name, current=200, phase=-120, name=\"PhaseB\"\n",
    ")\n",
    "winding_c = m2d.assign_winding(\n",
    "    assignment=phase_c.name, current=200, phase=-240, name=\"PhaseC\"\n",
    ")\n",
    "winding_n = m2d.assign_winding(assignment=phase_n.name, current=0, name=\"PhaseN\")\n",
    "winding_s = m2d.assign_winding(assignment=shield.name, current=0, name=\"Shield\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77598fb9",
   "metadata": {},
   "source": [
    "## Assign matrix\n",
    "\n",
    "Set matrix for RL parameters calculation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f20a68fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "m2d.assign_matrix(\n",
    "    assignment=[\"PhaseA\", \"PhaseB\", \"PhaseC\", \"PhaseN\", \"Shield\"], matrix_name=\"Matrix1\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4751c46d",
   "metadata": {},
   "source": [
    "## Assign mesh operation\n",
    "\n",
    "Assign surface approximation mesh to all objects."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6dbc7c82",
   "metadata": {},
   "outputs": [],
   "source": [
    "m2d.mesh.assign_surface_mesh_manual(\n",
    "    assignment=m2d.modeler.object_list, normal_dev=\"10deg\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c8c4f3f",
   "metadata": {},
   "source": [
    "## Analysis setup\n",
    "\n",
    "Set analysis setup to run the simulation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a01a7c47",
   "metadata": {},
   "outputs": [],
   "source": [
    "setup = m2d.create_setup()\n",
    "setup[\"MaximumPasses\"] = 15\n",
    "setup[\"PercentError\"] = 0.1\n",
    "setup[\"Frequency\"] = \"60Hz\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d79786e3",
   "metadata": {},
   "source": [
    "## Run the Maxwell 2D analysis\n",
    "\n",
    "The following command runs the 2D finite element analysis in Maxwell."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "be7a2360",
   "metadata": {},
   "outputs": [],
   "source": [
    "m2d.analyze_setup(name=setup.name)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4cb9fc6",
   "metadata": {},
   "source": [
    "## Field plots\n",
    "\n",
    "### Plot the magnitude of magnetic flux density"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9535cd75",
   "metadata": {},
   "outputs": [],
   "source": [
    "plot1 = m2d.post.create_fieldplot_surface(\n",
    "    assignment=m2d.modeler.object_list, quantity=\"Mag_B\", plot_name=\"B\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6c04315",
   "metadata": {},
   "source": [
    "### Add the expression for the current density absolute value using the advanced field calculator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5c10be47",
   "metadata": {},
   "outputs": [],
   "source": [
    "j_abs = {\n",
    "    \"name\": \"Jabs\",\n",
    "    \"description\": \"Absolute value of the current density\",\n",
    "    \"design_type\": [\"Maxwell 2D\"],\n",
    "    \"fields_type\": [\"Fields\"],\n",
    "    \"primary_sweep\": \"\",\n",
    "    \"assignment\": \"\",\n",
    "    \"assignment_type\": [\"\"],\n",
    "    \"operations\": [\n",
    "        \"Fundamental_Quantity('Jt')\",\n",
    "        \"Operation('Smooth')\",\n",
    "        \"Operation('ScalarZ')\",\n",
    "        \"Scalar_Function(FuncValue='Phase')\",\n",
    "        \"Operation('AtPhase')\",\n",
    "        \"Operation('Abs')\",\n",
    "    ],\n",
    "    \"report\": [\"Field_2D\"],\n",
    "}\n",
    "m2d.post.fields_calculator.add_expression(j_abs, None)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c62a586b",
   "metadata": {},
   "source": [
    "### Plot the absolute value of the current density in the conductive objects"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3c44ab18",
   "metadata": {},
   "outputs": [],
   "source": [
    "plot2 = m2d.post.create_fieldplot_surface(\n",
    "    assignment=[phase_a, phase_b, phase_c],\n",
    "    quantity=\"Jabs\",\n",
    "    plot_name=\"Jabs_cond_3Phase\",\n",
    ")\n",
    "plot3 = m2d.post.create_fieldplot_surface(\n",
    "    assignment=[shield, phase_n], quantity=\"Jabs\", plot_name=\"Jabs_shield_neutral\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f42a0738",
   "metadata": {},
   "source": [
    "## Release AEDT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d79b4d06",
   "metadata": {},
   "outputs": [],
   "source": [
    "m2d.save_project()\n",
    "m2d.release_desktop()\n",
    "# Wait 3 seconds to allow AEDT to shut down before cleaning the temporary directory.\n",
    "time.sleep(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9567b84",
   "metadata": {},
   "source": [
    "### Clean up"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45faedfb",
   "metadata": {},
   "source": [
    "All project files are saved in the folder ``temp_folder.name``.\n",
    "If you've run this example as a Jupyter notebook, you\n",
    "can retrieve those project files. The following cell\n",
    "removes all temporary files, including the project folder."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0435324",
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_folder.cleanup()"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "cell_metadata_filter": "-all",
   "main_language": "python",
   "notebook_metadata_filter": "-all"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
