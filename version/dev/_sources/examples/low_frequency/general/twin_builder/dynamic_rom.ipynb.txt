{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "408429c5",
   "metadata": {},
   "source": [
    "# Dynamic ROM\n",
    "\n",
    "This example shows how to use PyAEDT to create a dynamic reduced order model (ROM)\n",
    "in Twin Builder and run a Twin Builder time-domain simulation.\n",
    "\n",
    "> **Note:** This example uses functionality only available in Twin\n",
    "> Builder 2023 R2 and later.\n",
    "\n",
    "Keywords: **Twin Builder**, **Dynamic ROM**."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1a9efb3",
   "metadata": {},
   "source": [
    "## Perform imports and define constants\n",
    "\n",
    "Perform required imports."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "773e5dab",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import shutil\n",
    "import tempfile\n",
    "import time\n",
    "\n",
    "import ansys.aedt.core\n",
    "from ansys.aedt.core.examples import downloads\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65ad5872",
   "metadata": {},
   "source": [
    "Define constants."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a2c2adaf",
   "metadata": {},
   "outputs": [],
   "source": [
    "AEDT_VERSION = \"2025.2\"\n",
    "NUM_CORES = 4\n",
    "NG_MODE = False  # Open AEDT UI when it is launched."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d01109aa",
   "metadata": {},
   "source": [
    "## Create temporary directory\n",
    "\n",
    "Create a temporary directory where downloaded data or\n",
    "dumped data can be stored.\n",
    "If you'd like to retrieve the project data for subsequent use,\n",
    "the temporary folder name is given by ``temp_folder.name``."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e680a8d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_folder = tempfile.TemporaryDirectory(suffix=\".ansys\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e08b5d7",
   "metadata": {},
   "source": [
    "## Set up input data\n",
    "\n",
    "Define the file name."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fac3e79e",
   "metadata": {},
   "outputs": [],
   "source": [
    "source_snapshot_data_zipfilename = \"Ex1_Mechanical_DynamicRom.zip\"\n",
    "source_build_conf_file = \"dynarom_build.conf\"\n",
    "twin_builder_data_folder = os.path.join(temp_folder.name, \"twin_builder\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "baddec5a",
   "metadata": {},
   "source": [
    "Download data from the ``example_data`` repository."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "64cbf247",
   "metadata": {},
   "outputs": [],
   "source": [
    "downloads.download_twin_builder_data(\n",
    "    file_name=source_snapshot_data_zipfilename,\n",
    "    force_download=True,\n",
    "    local_path=temp_folder.name,\n",
    ")\n",
    "downloads.download_twin_builder_data(\n",
    "    source_build_conf_file, True, temp_folder.name\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4d6f3d2",
   "metadata": {},
   "source": [
    "Toggle these for local testing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "568ef5b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_folder = os.path.join(twin_builder_data_folder, \"Ex03\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ff6c7a2a",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# Unzip training data and config file\n",
    "ansys.aedt.core.examples.downloads.unzip(\n",
    "    os.path.join(twin_builder_data_folder, source_snapshot_data_zipfilename), data_folder\n",
    ")\n",
    "shutil.copyfile(\n",
    "    os.path.join(twin_builder_data_folder, source_build_conf_file),\n",
    "    os.path.join(data_folder, source_build_conf_file),\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2b632e3",
   "metadata": {},
   "source": [
    "## Launch Twin Builder and build ROM component\n",
    "\n",
    "Launch Twin Builder using an implicit declaration and add a new design with\n",
    "the default setup for building the dynamic ROM component."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4ebc250e",
   "metadata": {},
   "outputs": [],
   "source": [
    "project_name = os.path.join(temp_folder.name, \"dynamic_rom.aedt\")\n",
    "tb = ansys.aedt.core.TwinBuilder(\n",
    "    project=project_name,\n",
    "    version=AEDT_VERSION,\n",
    "    non_graphical=NG_MODE,\n",
    "    new_desktop=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a32e6e5",
   "metadata": {},
   "source": [
    "## Configure AEDT\n",
    "\n",
    "> **Note:** Only run the following cell if AEDT is not configured to run Twin Builder.\n",
    ">\n",
    "> The following cell configures AEDT and the schematic editor\n",
    "> to use the ``Twin Builder`` configuration.\n",
    "> The dynamic ROM feature is only available with a Twin Builder license.\n",
    "> A cell at the end of this example restores the AEDT configuration. If your\n",
    "> environment is set up to use the ``Twin Builder`` configuration, you do not\n",
    "> need to run these code blocks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "62c86d0f",
   "metadata": {},
   "outputs": [],
   "source": [
    "current_desktop_config = tb._odesktop.GetDesktopConfiguration()\n",
    "current_schematic_environment = tb._odesktop.GetSchematicEnvironment()\n",
    "tb._odesktop.SetDesktopConfiguration(\"Twin Builder\")\n",
    "tb._odesktop.SetSchematicEnvironment(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b52c0d80",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get the dynamic ROM builder object.\n",
    "rom_manager = tb._odesign.GetROMManager()\n",
    "dynamic_rom_builder = rom_manager.GetDynamicROMBuilder()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b3a12628",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Build the dynamic ROM with the specified configuration file.\n",
    "conf_file_path = os.path.join(data_folder, source_build_conf_file)\n",
    "dynamic_rom_builder.Build(conf_file_path.replace(\"\\\\\", \"/\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ba395c3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test if the ROM was created successfully\n",
    "dynamic_rom_path = os.path.join(data_folder, \"DynamicRom.dyn\")\n",
    "if os.path.exists(dynamic_rom_path):\n",
    "    tb._odesign.AddMessage(\n",
    "        \"Info\", \"path exists: {}\".format(dynamic_rom_path.replace(\"\\\\\", \"/\")), \"\"\n",
    "    )\n",
    "else:\n",
    "    tb._odesign.AddMessage(\n",
    "        \"Info\", \"path does not exist: {}\".format(dynamic_rom_path), \"\"\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e182f87",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# Create the ROM component definition in Twin Builder.\n",
    "rom_manager.CreateROMComponent(dynamic_rom_path.replace(\"\\\\\", \"/\"), \"dynarom\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "526612a8",
   "metadata": {},
   "source": [
    "## Create schematic\n",
    "\n",
    "Place components to create a schematic."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb322c20",
   "metadata": {},
   "source": [
    "Define the grid distance for ease in calculations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5b643528",
   "metadata": {},
   "outputs": [],
   "source": [
    "G = 0.00254"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1d38aac",
   "metadata": {},
   "source": [
    "Place a dynamic ROM component."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "acdde26d",
   "metadata": {},
   "outputs": [],
   "source": [
    "rom1 = tb.modeler.schematic.create_component(\"ROM1\", \"\", \"dynarom\", [36 * G, 28 * G])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30801c87",
   "metadata": {},
   "source": [
    "Place two excitation sources."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5e6fc458",
   "metadata": {},
   "outputs": [],
   "source": [
    "source1 = tb.modeler.schematic.create_periodic_waveform_source(\n",
    "    None, \"PULSE\", 190, 0.002, \"300deg\", 210, 0, [20 * G, 29 * G]\n",
    ")\n",
    "source2 = tb.modeler.schematic.create_periodic_waveform_source(\n",
    "    None, \"PULSE\", 190, 0.002, \"300deg\", 210, 0, [20 * G, 25 * G]\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3e7c294",
   "metadata": {},
   "source": [
    "Connect components with wires."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03ddce01",
   "metadata": {},
   "outputs": [],
   "source": [
    "tb.modeler.schematic.create_wire([[22 * G, 29 * G], [33 * G, 29 * G]])\n",
    "tb.modeler.schematic.create_wire(\n",
    "    [[22 * G, 25 * G], [30 * G, 25 * G], [30 * G, 28 * G], [33 * G, 28 * G]]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c40c606d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Zoom to fit the schematic.\n",
    "tb.modeler.zoom_to_fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2cf65c9b",
   "metadata": {},
   "source": [
    "## Parametrize transient setup\n",
    "\n",
    "Parametrize the default transient setup by setting the end time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "96e78ad9",
   "metadata": {},
   "outputs": [],
   "source": [
    "tb.set_end_time(\"1000s\")\n",
    "tb.set_hmin(\"1s\")\n",
    "tb.set_hmax(\"1s\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24877bef",
   "metadata": {},
   "source": [
    "## Solve transient setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a646c982",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "tb.analyze_setup(\"TR\", cores=NUM_CORES)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c0310f9",
   "metadata": {},
   "source": [
    "## Get report data and plot using Matplotlib\n",
    "\n",
    "Get report data and plot it using Matplotlib. The following code gets and plots\n",
    "the values for the voltage on the pulse voltage source and the values for the\n",
    "output of the dynamic ROM."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a8c6cb8",
   "metadata": {},
   "outputs": [],
   "source": [
    "input_excitation = \"PULSE1.VAL\"\n",
    "x = tb.post.get_solution_data(input_excitation, \"TR\", \"Time\")\n",
    "plt.plot(x.intrinsics[\"Time\"], x.data_real(input_excitation))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c9da82c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "output_temperature = \"ROM1.Temperature_history\"\n",
    "x = tb.post.get_solution_data(output_temperature, \"TR\", \"Time\")\n",
    "plt.plot(x.intrinsics[\"Time\"], x.data_real(output_temperature))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b621777c",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "plt.grid()\n",
    "plt.xlabel(\"Time\")\n",
    "plt.ylabel(\"Temperature History Variation with Input Temperature Pulse\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "feaca720",
   "metadata": {},
   "source": [
    "## Close Twin Builder\n",
    "\n",
    "After the simulation is completed, you can close Twin Builder or release it.\n",
    "All methods provide for saving the project before closing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3df2e4df",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Clean up the downloaded data.\n",
    "shutil.rmtree(twin_builder_data_folder)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "349fcc71",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Restore the earlier AEDT configuration and schematic environment.\n",
    "tb._odesktop.SetDesktopConfiguration(current_desktop_config)\n",
    "tb._odesktop.SetSchematicEnvironment(current_schematic_environment)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "975b0ca6",
   "metadata": {},
   "source": [
    "## Release AEDT\n",
    "\n",
    "Release AEDT and close the example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dfeb0c35",
   "metadata": {},
   "outputs": [],
   "source": [
    "tb.save_project()\n",
    "tb.release_desktop()\n",
    "# Wait 3 seconds to allow AEDT to shut down before cleaning the temporary directory.\n",
    "time.sleep(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9648f353",
   "metadata": {},
   "source": [
    "## Clean up\n",
    "\n",
    "All project files are saved in the folder ``temp_folder.name``. If you've run this example as a Jupyter notebook, you\n",
    "can retrieve those project files. The following cell removes all temporary files, including the project folder."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60ed643d",
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_folder.cleanup()"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "cell_metadata_filter": "-all",
   "main_language": "python",
   "notebook_metadata_filter": "-all"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
