{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "43a1f9f9",
   "metadata": {},
   "source": [
    "# LTI ROM creation and simulation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "630f834e",
   "metadata": {},
   "source": [
    "This example shows how you can use PyAEDT to create a Linear Time Invariant (LTI) ROM in Twin Builder\n",
    "and run a Twin Builder time-domain simulation. Inputs data are defined using Datapairs blocks with CSV files.\n",
    "\n",
    "Keywords: **Twin Builder**, **LTI**, **ROM**."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fddbc6b0",
   "metadata": {},
   "source": [
    "## Perform imports and define constants\n",
    "\n",
    "Perform required imports."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7bf68f3a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime\n",
    "import os\n",
    "import subprocess\n",
    "import tempfile\n",
    "import time\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from ansys.aedt.core import TwinBuilder\n",
    "from ansys.aedt.core.examples import downloads\n",
    "from ansys.aedt.core.application.variables import CSVDataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b6d80eb",
   "metadata": {},
   "source": [
    "Define constants"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "67e9ea4a",
   "metadata": {},
   "outputs": [],
   "source": [
    "AEDT_VERSION = \"2025.2\"\n",
    "NUM_CORES = 4\n",
    "NG_MODE = False  # Open AEDT UI when it is launched."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4b0399b",
   "metadata": {},
   "source": [
    "## Set paths and define input files and variables\n",
    "\n",
    "Set paths."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6fb75cd3",
   "metadata": {},
   "outputs": [],
   "source": [
    "training_data_folder = \"LTI_training_data.zip\"\n",
    "temp_folder = tempfile.TemporaryDirectory(suffix=\".ansys\")\n",
    "input_dir = downloads.download_twin_builder_data(\n",
    "    training_data_folder, True, temp_folder.name\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52903ed9",
   "metadata": {},
   "source": [
    "Download data from example_data repository"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "85bc8782",
   "metadata": {},
   "outputs": [],
   "source": [
    "twin_builder_data_folder = os.path.join(temp_folder.name, \"twin_builder\")\n",
    "data_folder = os.path.join(twin_builder_data_folder, \"LTI_training\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "45fff3a1",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# Unzip training data and parse ports names\n",
    "downloads.unzip(os.path.join(input_dir), data_folder)\n",
    "ports_names_file = \"Input_PortNames.txt\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a1083cc",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "## Get ports information from file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b174abd",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_ports_info(ports_file):\n",
    "    with open(ports_file, \"r\") as PortNameFile:\n",
    "        res = []\n",
    "        line = PortNameFile.readline()\n",
    "        line_list = list(line.split())\n",
    "        for i in range(len(line_list)):\n",
    "            res.append(\"Input\" + str(i + 1) + \"_\" + line_list[i])\n",
    "\n",
    "        line = PortNameFile.readline()\n",
    "        line_list = list(line.split())\n",
    "        for i in range(len(line_list)):\n",
    "            res.append(\"Output\" + str(i + 1) + \"_\" + line_list[i])\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b4ba3547",
   "metadata": {},
   "outputs": [],
   "source": [
    "pin_names = get_ports_info(os.path.join(data_folder, ports_names_file))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e49f356c",
   "metadata": {},
   "source": [
    "## Launch Twin Builder\n",
    "\n",
    "Launch Twin Builder using an implicit declaration and add a new design with\n",
    "the default setup."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc1a826b",
   "metadata": {},
   "outputs": [],
   "source": [
    "project_name = os.path.join(temp_folder.name, \"LTI_ROM.aedt\")\n",
    "tb = TwinBuilder(\n",
    "    project=project_name, version=AEDT_VERSION, non_graphical=NG_MODE, new_desktop=True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8a416a3",
   "metadata": {},
   "source": [
    "## Build the LTI ROM with specified configuration file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fd082997",
   "metadata": {},
   "outputs": [],
   "source": [
    "install_dir = tb.odesktop.GetRegistryString(\"Desktop/InstallationDirectory\")\n",
    "fitting_exe = os.path.join(install_dir, \"FittingTool.exe\")\n",
    "path = '\"' + fitting_exe + '\"' + \"  \" + '\"t\"' + \"  \" + '\"' + data_folder + '\"'\n",
    "process = subprocess.Popen(\n",
    "    path, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE\n",
    ")\n",
    "tb.logger.info(\"Fitting the LTI ROM training data\")\n",
    "exec = True\n",
    "startTime = datetime.datetime.now()\n",
    "execTime = 0.0\n",
    "while (\n",
    "    exec and execTime < 60.0\n",
    "):  # limiting the fitting process execution time to 1 minute\n",
    "    out, err = process.communicate()\n",
    "    execTime = (datetime.datetime.now() - startTime).total_seconds()\n",
    "    if \"An LTI ROM has been generated\" in str(out):\n",
    "        process.terminate()\n",
    "        exec = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1076c309",
   "metadata": {},
   "outputs": [],
   "source": [
    "rom_file = \"\"\n",
    "model_name_sml = \"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ebae967",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in os.listdir(data_folder):\n",
    "    if i.endswith(\".sml\"):\n",
    "        model_name_sml = i.split(\".\")[0]\n",
    "        rom_file = os.path.join(data_folder, i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0cadb675",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "if os.path.exists(rom_file):\n",
    "    tb.logger.info(\"Built intermediate ROM file successfully at: %s\", rom_file)\n",
    "else:\n",
    "    tb.logger.info(\"ROM file does not exist at the expected location : %s\", rom_file)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ac2af13",
   "metadata": {},
   "source": [
    "## Import the ROM component model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f1b9be3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "is_created = tb.modeler.schematic.create_component_from_sml(\n",
    "    input_file=rom_file, model=model_name_sml, pins_names=pin_names\n",
    ")\n",
    "os.remove(rom_file)\n",
    "tb.logger.info(\"LTI ROM model successfully imported.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d64e7327",
   "metadata": {},
   "source": [
    "## Import the ROM component model in Twin Builder\n",
    "\n",
    "Place components to create a schematic."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0f84a09",
   "metadata": {},
   "source": [
    "Define the grid distance for ease in calculations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5b08e9fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "grid_distance = 0.00254"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6e4cc45",
   "metadata": {},
   "source": [
    "Place the ROM component"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "730ed32b",
   "metadata": {},
   "outputs": [],
   "source": [
    "rom1 = tb.modeler.schematic.create_component(\n",
    "    \"ROM1\", \"\", model_name_sml, [36 * grid_distance, 28 * grid_distance]\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "516667a1",
   "metadata": {},
   "source": [
    "Place datapairs blocks for inputs definition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "24204755",
   "metadata": {},
   "outputs": [],
   "source": [
    "source1 = tb.modeler.schematic.create_component(\n",
    "    \"source1\",\n",
    "    \"\",\n",
    "    \"Simplorer Elements\\\\Basic Elements\\\\Tools\\\\Time Functions:DATAPAIRS\",\n",
    "    [20 * grid_distance, 29 * grid_distance],\n",
    ")\n",
    "source2 = tb.modeler.schematic.create_component(\n",
    "    \"source2\",\n",
    "    \"\",\n",
    "    \"Simplorer Elements\\\\Basic Elements\\\\Tools\\\\Time Functions:DATAPAIRS\",\n",
    "    [20 * grid_distance, 25 * grid_distance],\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72b53a9c",
   "metadata": {},
   "source": [
    "Import Datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6201b972",
   "metadata": {},
   "outputs": [],
   "source": [
    "data1 = CSVDataset(os.path.join(data_folder, \"data1.csv\"))\n",
    "data2 = CSVDataset(os.path.join(data_folder, \"data2.csv\"))\n",
    "dataset1 = tb.create_dataset(\"data1\", data1.data[\"time\"], data1.data[\"input1\"])\n",
    "dataset2 = tb.create_dataset(\"data2\", data2.data[\"time\"], data2.data[\"input2\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "74bb4f39",
   "metadata": {},
   "outputs": [],
   "source": [
    "source1.parameters[\"CH_DATA\"] = dataset1.name\n",
    "source2.parameters[\"CH_DATA\"] = dataset2.name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d4ce6c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "tb.modeler.schematic.update_quantity_value(source1.composed_name, \"PERIO\", \"0\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9923b1db",
   "metadata": {},
   "outputs": [],
   "source": [
    "tb.modeler.schematic.update_quantity_value(\n",
    "    source1.composed_name, \"TPERIO\", \"Tend+1\", \"s\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f62239eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "tb.modeler.schematic.update_quantity_value(source2.composed_name, \"PERIO\", \"0\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a15b7007",
   "metadata": {},
   "outputs": [],
   "source": [
    "tb.modeler.schematic.update_quantity_value(\n",
    "    source2.composed_name, \"TPERIO\", \"Tend+1\", \"s\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "340e1313",
   "metadata": {},
   "source": [
    "Connect components with wires"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "450b66d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "tb.modeler.schematic.create_wire(\n",
    "    points=[source1.pins[0].location, rom1.pins[0].location]\n",
    ")\n",
    "tb.modeler.schematic.create_wire(\n",
    "    points=[source2.pins[0].location, rom1.pins[1].location]\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53237622",
   "metadata": {},
   "source": [
    "Zoom to fit the schematic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "374903ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "tb.modeler.zoom_to_fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54ea71fc",
   "metadata": {},
   "source": [
    "## Parametrize transient setup\n",
    "\n",
    "Parametrize the default transient setup by setting the end time and minimum/maximum time steps."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "54f4c5fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "tb.set_end_time(\"700s\")\n",
    "tb.set_hmin(\"0.001s\")\n",
    "tb.set_hmax(\"1s\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39e8ca66",
   "metadata": {},
   "source": [
    "## Solve transient setup\n",
    "\n",
    "Solve the transient setup."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bcccba42",
   "metadata": {},
   "outputs": [],
   "source": [
    "tb.analyze_setup(\"TR\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3def0479",
   "metadata": {},
   "source": [
    "## Get report data and plot using Matplotlib\n",
    "\n",
    "Get report data and plot it using Matplotlib. The following code gets and plots\n",
    "the values for the inputs and outputs of the LTI ROM."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47674911",
   "metadata": {},
   "source": [
    "Units used are based on AEDT default units."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7f5bd131",
   "metadata": {},
   "outputs": [],
   "source": [
    "variables_postprocessing = []\n",
    "pin_names_str = \",\".join(pin_names)\n",
    "rom_pins = pin_names_str.lower().split(\",\")\n",
    "fig, ax = plt.subplots(ncols=1, nrows=2, figsize=(18, 7))\n",
    "fig.subplots_adjust(hspace=0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14c10f55",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(0, 2):\n",
    "    variable = \"ROM1.\" + rom_pins[i]\n",
    "    x = tb.post.get_solution_data(variable, \"TR\", \"Time\")\n",
    "    ax[0].plot(\n",
    "        [el for el in x.intrinsics[\"Time\"]], x.data_real(variable), label=variable\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c6b5dc8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "ax[0].set_title(\"ROM inputs\")\n",
    "ax[0].legend(loc=\"upper left\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "efa92dbb",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(2, 4):\n",
    "    variable = \"ROM1.\" + rom_pins[i]\n",
    "    x = tb.post.get_solution_data(variable, \"TR\", \"Time\")\n",
    "    ax[1].plot(\n",
    "        [el for el in x.intrinsics[\"Time\"]], x.data_real(variable), label=variable\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fef1dd36",
   "metadata": {},
   "outputs": [],
   "source": [
    "ax[1].set_title(\"ROM outputs\")\n",
    "ax[1].legend(loc=\"upper left\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b4fd17e",
   "metadata": {},
   "source": [
    "Show plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c1fbb966",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90f2b78a",
   "metadata": {},
   "source": [
    "## Release AEDT\n",
    "\n",
    "Release AEDT and close the example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bee987e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "tb.save_project()\n",
    "tb.release_desktop()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d579884",
   "metadata": {},
   "source": [
    "Wait 3 seconds to allow AEDT to shut down before cleaning the temporary directory."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "609517ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "time.sleep(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a56d4fad",
   "metadata": {},
   "source": [
    "## Clean up\n",
    "\n",
    "All project files are saved in the folder ``temp_folder.name``. If you've run this example as a Jupyter notebook, you\n",
    "can retrieve those project files. The following cell removes all temporary files, including the project folder."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b1d3095",
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_folder.cleanup()"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "cell_metadata_filter": "-all",
   "main_language": "python",
   "notebook_metadata_filter": "-all"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
