{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "bb0ff0d8",
   "metadata": {},
   "source": [
    "# EDB: IPC2581 export\n",
    "\n",
    "This example shows how you can use PyAEDT to export an IPC2581 file.\n",
    "\n",
    "Perform required imports, which includes importing a section."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4524c4a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import tempfile\n",
    "\n",
    "import pyedb\n",
    "from pyedb.generic.general_methods import generate_unique_name\n",
    "from pyedb.misc.downloads import download_file"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e52d82d4",
   "metadata": {},
   "source": [
    "## Download the AEDB file and copy it in the temporary folder."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a00ecc31",
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_dir = tempfile.TemporaryDirectory(suffix=\".ansys\")\n",
    "targetfile = download_file(\"edb/ANSYS-HSD_V1.aedb\", destination=temp_dir.name)\n",
    "ipc2581_file_name = os.path.join(temp_dir.name, \"Ansys_Hsd.xml\")\n",
    "print(targetfile)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2012665",
   "metadata": {},
   "source": [
    "## Launch EDB\n",
    "\n",
    "Launch the `pyedb.Edb` class, using EDB 2023.\n",
    "> Note that length dimensions passed to EDB are in SI units."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93f45399",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Select EDB version (change it manually if needed, e.g. \"2025.1\")\n",
    "edb_version = \"2025.2\"\n",
    "print(f\"EDB version: {edb_version}\")\n",
    "\n",
    "edb = pyedb.Edb(edbpath=targetfile, edbversion=edb_version)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2828d7ca",
   "metadata": {},
   "source": [
    "## Parametrize the width of a trace."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "31d7eae6",
   "metadata": {},
   "outputs": [],
   "source": [
    "edb.modeler.parametrize_trace_width(\"A0_N\", parameter_name=generate_unique_name(\"Par\"), variable_value=\"0.4321mm\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db7251a5",
   "metadata": {},
   "source": [
    "## Create a cutout and plot it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe29d16d",
   "metadata": {},
   "outputs": [],
   "source": [
    "signal_list = []\n",
    "for net in edb.nets.netlist:\n",
    "    if \"PCIe\" in net:\n",
    "        signal_list.append(net)\n",
    "power_list = [\"GND\"]\n",
    "edb.cutout(\n",
    "    signal_list=signal_list,\n",
    "    reference_list=power_list,\n",
    "    extent_type=\"ConvexHull\",\n",
    "    expansion_size=0.002,\n",
    "    use_round_corner=False,\n",
    "    number_of_threads=4,\n",
    "    remove_single_pin_components=True,\n",
    "    use_pyaedt_extent_computing=True,\n",
    "    extent_defeature=0,\n",
    ")\n",
    "edb.nets.plot(None, None, color_by_net=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "595c5924",
   "metadata": {},
   "source": [
    "## Export the EDB to an IPC2581 file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "05040d59",
   "metadata": {},
   "outputs": [],
   "source": [
    "edb.export_to_ipc2581(ipc2581_file_name, \"inch\")\n",
    "print(\"IPC2581 File has been saved to {}\".format(ipc2581_file_name))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29865b78",
   "metadata": {},
   "source": [
    "## Close EDB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aec0a09b",
   "metadata": {},
   "outputs": [],
   "source": [
    "edb.close_edb()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ed2d0cf",
   "metadata": {},
   "source": [
    "## Clean up the temporary directory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33cc6366",
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_dir.cleanup()"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "cell_metadata_filter": "-all",
   "main_language": "python",
   "notebook_metadata_filter": "-all"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
