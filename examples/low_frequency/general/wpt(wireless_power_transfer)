import os
import tempfile
import time
import numpy as np
from ansys.aedt.core import Maxwell3d
from ansys.aedt.core.generic.constants import Axis

# ---------- PARAMETERS ----------
AEDT_VERSION = "2025.2"
NG_MODE = False
PROJECT_NAME = "WPT_Transient_Final.aedt"

frequency_hz = 200e3
amps_primary = 1.0
load_resistance = 10.0
sim_time = 5e-5
time_steps = 1001

coil_radius = 20.0           # mm
coil_wire_diam = 4.0         # mm (height of cylinder)
coil_separation = 15.0       # mm between coil centers

project_dir = tempfile.TemporaryDirectory(suffix=".ansys")
project_path = os.path.join(project_dir.name, PROJECT_NAME)

m3d = Maxwell3d(
    project=project_path,
    version=AEDT_VERSION,
    design="WPT_Transient",
    solution_type="Transient",
    new_desktop=True,
    non_graphical=NG_MODE,
)
m3d.modeler.model_units = "mm"

existing = m3d.modeler.object_names
for name in ("Load_Tab", "R_Load", "PrimaryWinding", "SecondaryWinding", "Prim_Coil", "Sec_Coil"):
    if name in existing:
        m3d.modeler.delete(name)


prim_center = [0, 0, 0]
sec_center = [0, 0, coil_separation]

prim = m3d.modeler.create_cylinder(
    orientation=Axis.Z,
    origin=prim_center,
    radius=coil_radius,
    height=coil_wire_diam,
    name="Coil_Primary",
    material="copper",
)

sec = m3d.modeler.create_cylinder(
    orientation=Axis.Z,
    origin=sec_center,
    radius=coil_radius,
    height=coil_wire_diam,
    name="Coil_Secondary",
    material="copper",
)


region = m3d.modeler.create_region(name="Region", extent=60)  # creates region around model

prim_faces = [f for f in prim.faces]
sec_faces = [f for f in sec.faces]

prim_top_face = max(prim_faces, key=lambda f: f.center[2])
sec_top_face  = max(sec_faces,  key=lambda f: f.center[2])


load_tab_origin = [coil_radius + 10.0, 1.0, coil_separation - coil_wire_diam / 2]  
load_tab = m3d.modeler.create_box(
    origin=load_tab_origin,
    sizes=[2.0, 2.0, coil_wire_diam],
    name="Load_Tab",
)
m3d.assign_material(load_tab, "copper")

load_tab_obj = m3d.modeler["Load_Tab"]
load_tab_faces = [f for f in load_tab_obj.faces]
load_face = max(load_tab_faces, key=lambda f: abs(f.normal[0]))

m3d.assign_resistive_sheet(
    assignment=load_face,
    resistance=f"{load_resistance}ohm",
    name="R_Load",
)

prim_coil = m3d.assign_coil(assignment=[prim_top_face], conductors_number=1, name="Prim_Coil")
sec_coil  = m3d.assign_coil( assignment=[sec_top_face],  conductors_number=1, name="Sec_Coil")

prim_coil_name = prim_coil.name if hasattr(prim_coil, "name") else str(prim_coil)
sec_coil_name  = sec_coil.name  if hasattr(sec_coil,  "name") else str(sec_coil)


current_expr = f"{amps_primary}*sin(2*PI*{frequency_hz}*Time)"

# Get object names as strings  
prim_obj_name = "Coil_Primary"  # or prim.name  
sec_obj_name = "Coil_Secondary"  # or sec.name  
  
# Assign windings to objects, not faces  
prim_winding = m3d.assign_winding(  
    assignment=[prim_obj_name],  # Object name, not face  
    winding_type="Current",  
    is_solid=True,  
    current=current_expr,  
    resistance=0,  
    name="PrimaryWinding",  
)  
  
sec_winding = m3d.assign_winding(  
    assignment=[sec_obj_name],  # Object name, not face  
    winding_type="Current",  
    is_solid=True,  
    current="0A",  # Add unit  
    resistance=load_resistance,  # Set to load_resistance, not 0  
    name="SecondaryWinding",  
)


m3d.add_winding_coils(assignment=prim_winding.name, coils=[prim_coil_name])
m3d.add_winding_coils(assignment=sec_winding.name,  coils=[sec_coil_name])


m3d.mesh.assign_length_mesh(assignment=["Coil_Primary", "Coil_Secondary", "Load_Tab"], maximum_length=2.0, name="CoilMesh")


valid = m3d.validate_simple()
print("Validation result:", valid)

if not valid:
    print("Validation FAILED. Inspect Message Manager. Exiting script before solve.")
else:
    setup = m3d.create_setup("TransientSetup")
    setup.props["Time Step"] = f"{sim_time/time_steps}s"
    setup.props["Stop Time"] = f"{sim_time}s"
    setup.props["Adaptive"] = False

    m3d.save_project(project_path)
    print("Starting transient solve...")
    m3d.analyze_setup(setup.name)
    print("Solve requested. Check AEDT Message Manager for progress and results.")



print("Project saved at:", project_path)

