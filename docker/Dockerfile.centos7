# syntax=docker/dockerfile:1

FROM centos:centos7.9.2009 as base

################################################################
# Base setup
RUN yum update -y && yum install -y epel-release

RUN yum install -y \
    gcc \
    gcc-c++ \
    libffi-devel \
    openssl-devel \
    openssl-libs \
    bzip2-devel \
    git \
    wget \
    make

# Install Rust and cargo
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

# Parts needed by nuitka
RUN yum install -y \
    patchelf \
    libfuse2 \
    ccache

################################################################
# Custom python build
FROM base as python

ENV PYTHON_VERSION=3.10.9
ENV SQLITE_ROOT=sqlite-3.38.4.0
ENV BZIP2_ROOT=bzip2-1.0.8
ENV XZ_ROOT=xz-5.2.6
ENV OPENSSL_VERSION=1.1.1q
ENV CURL_VERSION=7.87.0

WORKDIR /usr/src

# Build openssl
RUN wget https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \
    && tar -xzf openssl-${OPENSSL_VERSION}.tar.gz \
    && cd openssl-${OPENSSL_VERSION} \
    && ./config -fPIC --prefix=/usr/local --openssldir=/usr/local --shared \
    && make -j$(grep -c processor /proc/cpuinfo) \
    && make install_sw

RUN wget https://curl.se/download/curl-${CURL_VERSION}.tar.gz \
    && tar -xzf curl-${CURL_VERSION}.tar.gz \
    && cd curl-${CURL_VERSION} \
    && ./configure --with-ssl=/usr/local \
    && make \
    && make install

# Get python sources and prepare build
RUN wget https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tar.xz -O Python.tar.xz \
    && mkdir Python \
    && tar -xaf ./Python.tar.xz --strip-components=1 -C ./Python \
    && cd Python \
    && mkdir .externals \
    && cd .externals \
    && mkdir include lib

# Build sqlite
RUN cd Python/.externals \
    && wget https://github.com/python/cpython-source-deps/archive/${SQLITE_ROOT}.tar.gz \
    && mkdir ${SQLITE_ROOT} \ 
    && tar -xzf ${SQLITE_ROOT}.tar.gz --strip-components=1 -C ./${SQLITE_ROOT} \
    && cd ${SQLITE_ROOT} \
    && gcc -c -fPIC sqlite3.c \
    && gcc -shared -o libsqlite3.so sqlite3.o \
    && cp libsqlite3.so /usr/local/lib \
    && cp sqlite3.h /usr/local/include

# Build bzip2
RUN cd Python/.externals \
    && wget https://sourceware.org/pub/bzip2/${BZIP2_ROOT}.tar.gz \
    && mkdir ${BZIP2_ROOT} \
    && tar -xaf ${BZIP2_ROOT}.tar.gz --strip-components=1 -C ./${BZIP2_ROOT} \
    && cd ${BZIP2_ROOT} \
    && make -f Makefile-libbz2_so \
    && make PREFIX=/usr/local install \
    && cp -P libbz2.so* /usr/local/lib

# Build xz
RUN cd Python/.externals \
    && wget https://tukaani.org/xz/${XZ_ROOT}.tar.gz \
    && mkdir ${XZ_ROOT} \
    && tar -xaf ${XZ_ROOT}.tar.gz --strip-components=1 -C ./${XZ_ROOT} \
    && cd ${XZ_ROOT} \
    && sh ./configure --prefix=/usr/local \
    && make install

# Build python
RUN cd Python/.externals \
    && cd /usr/src/Python \
    && ./configure LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib CPPFLAGS="-I/usr/local/include/openssl" LDFLAGS="-L/usr/local/lib64 -L/usr/local/lib" --prefix=/usr/local --enable-shared --with-ensurepip=install \
    && make install -j$(grep -c processor /proc/cpuinfo)

################################################################
# Venv creation
FROM python as venv

ARG branch
ARG revision
ARG short_revision

WORKDIR /usr/src/repo-template

ENV LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:$LD_LIBRARY_PATH
ENV LDFLAGS=-L/usr/local/lib64
ENV CPPFLAGS=-I/usr/local/include
ENV CFLAGS=-std=c99
ENV PYCURL_SSL_LIBRARY=openssl

# Setup Python virtual env
ENV VIRTUAL_ENV=/opt/venv
RUN python3 -m venv $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

RUN python3 -m pip install --upgrade pip \
    && python3 -m pip uninstall -y setuptools \
    && python3 -m pip install wheel cython setuptools requests ordered-set 

# Copy source code
COPY . .

# Create dev environment
RUN --mount=type=secret,id=netrc,dst=/root/.netrc \
    --mount=type=cache,target=/root/.ccache \
    --mount=type=cache,target=/root/.cache/pip \
    python3 build.py --branch=$branch --short-revision=$short_revision --revision=$revision dev

################################################################
# Freezing
FROM venv as build

ARG branch
ARG revision
ARG short_revision

# Copy python icon (needed by nuitka)
COPY docker/python3.xpm /usr/share/pixmaps/python3.xpm

# Create distributables
RUN --mount=type=secret,id=netrc,dst=/root/.netrc \
    --mount=type=cache,target=/root/.ccache \
    --mount=type=cache,target=/root/.cache/pip \
    python3 build.py --branch=$branch --short-revision=$short_revision --revision=$revision dist    

# ################################################################
# Runtime
#FROM centos:centos7.9.2009 as runtime
FROM build as runtime

WORKDIR /app

# for rest tests
#RUN python3 -m pip install requests

COPY --from=build /usr/src/repo-template/freeze/build/rep-* /app/
COPY --from=build /usr/src/repo-template/tests /app/tests
RUN ls -lrt /app/

# this allows container to run even though not a service
CMD sleep infinity